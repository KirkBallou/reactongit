{"version":3,"sources":["serviceWorker.js","grid.js","index.js"],"names":["Boolean","window","location","hostname","match","tileData","img","title","author","skills","calendly","withStyles","theme","root","Object","objectSpread","mixins","gutters","paddingTop","spacing","unit","paddingBottom","margin","display","flexWrap","justifyContent","overflow","backgroundColor","gridList","width","height","icon","color","props","classes","react_default","a","createElement","Item","Group","Content","verticalAlign","Header","as","Icon","size","name","Paper_default","className","elevation","map","tile","Card","onclick","Image","src","Meta","Description","extra","Button_default","variant","href","class","styleLink","document","rel","head","appendChild","body","style","ReactDOM","render","_ref","children","Container","grid","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63884693.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\n//import InfoIcon from '@material-ui/icons/Info';\nimport { Header, Card, Icon, Image } from 'semantic-ui-react'\n\nimport Button from '@material-ui/core/Button';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { Item } from 'semantic-ui-react'\n//import image from 'https://s3.amazonaws.com/37assets/svn/1065-IMG_2529.jpg';\n//import tileData from './tileData';\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    margin:40,\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: '#fff',\n  },\n  gridList: {\n    width: 500,\n    height: 500,\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n});\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *   },\n *   {\n *     [etc...]\n  },\n ];\n */\n\n const tileData = [\n  {\n      img: 'https://avatars1.githubusercontent.com/u/2172549?s=400&v=4',\n      title: 'Zach Herring',\n      author: 'zherring',\n      skills: 'Product and Design',\n      calendly: 'zach-herring',\n    },\n    {\n      img: 'https://avatars3.githubusercontent.com/u/346184?s=460&v=4',\n      title: 'KirkB',\n      author: 'KirkBallou',\n      skills: 'Python, Node, Solidity',\n      calendly: 'kirkballou',\n    },\n  {\n    img: 'https://avatars3.githubusercontent.com/u/1094341?s=400&v=4',\n    title: 'Dmitriy Ryajov',\n    author: 'dryajov',\n    skills: 'Python, Node, Solidity',\n    calendly: 'kirkballou',\n  },\n  {\n    img: 'https://avatars0.githubusercontent.com/u/36509712?s=400&v=4',\n    title: 'Steven Pearce',\n    author: 'StevenJNPearce',\n    skills: 'Typescript, JavaScript, Go',\n    calendly: 'kirkballou',\n  },\n  {\n    img: 'https://avatars2.githubusercontent.com/u/4423365?s=460&v=4',\n    title: 'Dan Nolan',\n    author: 'Dan-Nolan',\n    skills: 'Python, Node, Solidity',\n    calendly: 'kirkballou',\n  },\n  {\n    img: 'https://avatars1.githubusercontent.com/u/1256464?s=460&v=4',\n    title: 'Yucong Sun',\n    author: 'thefallentree',\n    skills: 'Python, Node, Solidity',\n    calendly: 'kirkballou',\n  }\n ];\n\n\n\n\n\n\n\n\nfunction TitlebarGridList(props) {\n  const { classes } = props;\n\n\n  return (\n    <div>\n     <center>\n     <div width=\"350\">\n     <Item.Group >\n     <Item>\n       <Item.Content verticalAlign='middle'>\n         <Item.Header as='a'> </Item.Header>\n       </Item.Content>\n     </Item>\n    </Item.Group>\n <Header as='h2' color='white'>\n <Icon.Group size='large'>\n <Icon name='calendar check outline' />\n  </Icon.Group>\n  Book a Dev\n</Header>\n\n    </div>\n     </center>\n\n    <Paper className={classes.root} elevation={1}>\n    {tileData.map(tile => (\n    <Card onclick=\"\">\n      <Image src={tile.img} height='244' width='290'/>\n      <Card.Content>\n        <Card.Header>{tile.title}</Card.Header>\n        <Card.Meta>\n          <span className='date'>{tile.author}</span>\n        </Card.Meta>\n        <Card.Description>{tile.skills}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <a>\n          <Icon name='user' />\n          103 Followers\n        </a>\n        <Button variant=\"contained\" href={\"javascript:activateLasers('\" + tile.calendly+\"');\"} class=\"ui primary right floated button\">\n      Book Now\n      </Button>\n\n      </Card.Content>\n    </Card>\n      ))}\n        </Paper></div>\n      // <GridList cellHeight={180} className={classes.gridList}>\n      //   <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n      //     <ListSubheader component=\"div\">December</ListSubheader>\n      //   </GridListTile>\n      //   {tileData.map(tile => (\n      //     <GridListTile key={tile.img}>\n      //       <img src={tile.img} alt={tile.title} />\n      //       <Card>\n      //         <Image src={tile.img} />\n      //         <Card.Content>\n      //           <Card.Header>{tile.title}</Card.Header>\n      //           <Card.Meta>\n      //             <span className='date'>{tile.author}</span>\n      //           </Card.Meta>\n      //           <Card.Description>{tile.author}</Card.Description>\n      //         </Card.Content>\n      //         <Card.Content extra>\n      //           <a>\n      //             <Icon name='user' />\n      //             22 Friends\n      //           </a>\n      //         </Card.Content>\n      //       </Card>\n      //       <GridListTileBar\n      //         title={tile.title}\n      //         subtitle={<span>by: {tile.author}</span>}\n      //         actionIcon={\n      //           <IconButton className={classes.icon}>\n      //\n      //           </IconButton>\n      //         }\n      //       />\n      //     </GridListTile>\n      //   ))}\n      // </GridList>\n\n  );\n}\n\nTitlebarGridList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TitlebarGridList);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Container, Header, List } from \"semantic-ui-react\";\n\nimport Example from \"./example\";\n\nimport ImgGrid from \"./grid\";\n\nconst App = ({ children }) => (\n\n\n  <Container>\n    {children}\n  </Container>\n);\n\n// TODO: Switch to https://github.com/palmerhq/the-platform#stylesheet when it will be stable\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\ndocument.body.style = 'background: #E91E63';\n\n\n\n\nReactDOM.render(\n  <App >\n <i class=\"fas fa-calendar-check\"></i>\n    <ImgGrid />\n  </App>,\n  document.getElementById(\"root\")\n);\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}